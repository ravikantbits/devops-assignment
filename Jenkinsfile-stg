pipeline {
    agent any
    environment {
        AZURE_SP = credentials('azure_sp')
        AZURE_RESOURCE_GROUP = 'devops-assignment'
        AZURE_STAGE_AKS = 'aks-stage'
    }
    stages {
        stage('Version Input') {
            steps {
                script {
                    def usInput = input(message: 'Enter application version for deployment',
                        ok: 'Deploy', description: 'Test', parameters:
                        [[$class: 'TextParameterDefinition', defaultValue: 'latest',
                        description: 'STAGE', name: 'devops-assignment']])
                    env.APP_VERSION=usInput
                    echo "Input Version: ${env.APP_VERSION}"
                }
            }
        }
        stage('Deploy') {
            steps {
                echo 'Deploy'
                // TODO: apply version in deployment.yml
                sh '''
                    az login --service-principal -u $AZURE_SP_CLIENT_ID -p $AZURE_SP_CLIENT_SECRET -t $AZURE_SP_TENANT_ID
                    az aks get-credentials --resource-group $AZURE_RESOURCE_GROUP --name $AZURE_STAGE_AKS
                    kubectl delete deployment devops-assignment
                    kubectl apply -f deployment.yml
                '''
            }
        }
    }

    post {
        success {
            echo "Build successful"
        }
        failure {
            echo "Build failed"
            // Send alert to team/admin regarding build failure
        }
    }
}
